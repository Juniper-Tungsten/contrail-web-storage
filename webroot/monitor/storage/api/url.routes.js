/*
 * Copyright (c) 2014 Juniper Networks, Inc. All rights reserved.
 */

/* This file is automatically generated from the parseURL.xml at
   Thu Dec 17 2015 15:00:17 GMT-0800 (PST)
   Please do not edit this file.
 */

var parseURLReq = require(process.mainModule.exports["corePath"] + '/src/serverroot/common/parseURLRequire')
  , timeout = require('request-timeout')
  , storageDashboardApi = require('./storage.dashboard.api')
  , storageMonsApi = require('./storage.mons.api')
  , storageOsdsApi = require('./storage.osd.api')
  , storagePGsApi = require('./storage.pg.api')
  , storagePoolsApi = require('./storage.pool.api')
  ;


if (!module.parent) {
  console.log("Call main app through 'node app'");
  process.exit(1);
}
urlRoutes = module.exports;

/* Default handler for request timeout */
function defHandleReqTimeout (req, res)
{
  var str = "Request timed out: URL::" + req.url;
  if (req.pubChannel) {
    /* Delete the Req Pending Q Entry */
    parseURLReq.cacheApi.deleteCachePendingQueueEntry(req.pubChannel);
  };
  res.req.invalidated = true;
  res.send(parseURLReq.global.HTTP_STATUS_GATEWAY_TIMEOUT, str);
}

urlRoutes.registerURLsToApp = function(app) {
/* Register the URL with callback */
  app.get('/api/storage/', handler_dashboard);
  app.get('/api/tenant/storage/cluster/hosts', storageDashboardApi_getSources);
  app.get('/api/tenant/storage/cluster/health/status', storageDashboardApi_getStorageJobClusterStatus);
  app.get('/api/tenant/storage/cluster/status', storageDashboardApi_getStorageClusterHealthStatus);
  app.get('/api/tenant/storage/cluster/df/status', storageDashboardApi_getStorageClusterDFStatus);
  app.get('/api/tenant/storage/cluster/usage', storageDashboardApi_getStorageClusterUsage);
  app.get('/api/tenant/storage/cluster/osd/activity', storageDashboardApi_getStorageClusterOSDActivity);
  app.get('/api/tenant/storage/cluster/pool/activity', storageDashboardApi_getStorageClusterPoolActivity);
  app.get('/api/tenant/storage/cluster/disk/activity', storageDashboardApi_getStorageClusterDiskActivity);
  app.get('/api/tenant/storage/cluster/osd/status', storageOsdsApi_getStorageOSDStatus);
  app.get('/api/tenant/storage/cluster/monitors/summary', storageMonsApi_getMonitorSummary);
  app.get('/api/tenant/storage/cluster/monitor/details', storageMonsApi_getMonitorDetails);
  app.get('/api/tenant/storage/cluster/osds/summary', storageOsdsApi_getStorageOSDsSummary);
  app.get('/api/tenant/storage/cluster/osd/details', storageOsdsApi_getStorageOSDDetails);
  app.get('/api/tenant/storage/cluster/osd/version', storageOsdsApi_getOSDVersion);
  app.get('/api/tenant/storage/cluster/osds/tree', storageOsdsApi_getStorageOSDTree);
  app.get('/api/tenant/storage/cluster/pools/summary', storagePoolsApi_getStoragePGPoolsSummary);
  app.get('/api/tenant/storage/cluster/pool/details', storagePoolsApi_getStoragePGPoolDetails);
  app.get('/api/tenant/storage/cluster/pgs/summary', storagePGsApi_getStoragePGSummary);
  app.get('/api/tenant/storage/cluster/pgs/stuck', storagePGsApi_getStoragePGStuck);
  app.get('/api/tenant/storage/cluster/pool/flow-series', storagePoolsApi_getStoragePoolFlowSeries);
  app.get('/api/tenant/storage/cluster/osd/flow-series', storageOsdsApi_getStorageOSDFlowSeries);
  app.get('/api/tenant/storage/cluster/osd/avg-bw', storageOsdsApi_getStorageOSDAvgBW);
  app.get('/api/tenant/storage/analytics/osds', storageOsdsApi_getStorageOsdsUVEsList);
  app.get('/api/tenant/storage/cluster/disk/flow-series', storageMonsApi_getStorageDiskFlowSeries);


  parseURLReq.rbac.setFeatureByURL('/api/storage/', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/hosts', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/health/status', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/status', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/df/status', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/usage', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/osd/activity', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/pool/activity', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/disk/activity', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/osd/status', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/monitors/summary', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/monitor/details', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/osds/summary', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/osd/details', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/osd/version', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/osds/tree', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/pools/summary', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/pool/details', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/pgs/summary', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/pgs/stuck', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/pool/flow-series', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/osd/flow-series', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/osd/avg-bw', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/analytics/osds', 'get', app.routes, 'storage');
  parseURLReq.rbac.setFeatureByURL('/api/tenant/storage/cluster/disk/flow-series', 'get', app.routes, 'storage');
}
handler_dashboard = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, handler.dashboard);
  }
}
storageDashboardApi_getSources = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storageDashboardApi.getSources);
  }
}
storageDashboardApi_getStorageJobClusterStatus = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storageDashboardApi.getStorageJobClusterStatus);
  }
}
storageDashboardApi_getStorageClusterHealthStatus = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storageDashboardApi.getStorageClusterHealthStatus);
  }
}
storageDashboardApi_getStorageClusterDFStatus = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storageDashboardApi.getStorageClusterDFStatus);
  }
}
storageDashboardApi_getStorageClusterUsage = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storageDashboardApi.getStorageClusterUsage);
  }
}
storageDashboardApi_getStorageClusterOSDActivity = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storageDashboardApi.getStorageClusterOSDActivity);
  }
}
storageDashboardApi_getStorageClusterPoolActivity = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storageDashboardApi.getStorageClusterPoolActivity);
  }
}
storageDashboardApi_getStorageClusterDiskActivity = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storageDashboardApi.getStorageClusterDiskActivity);
  }
}
storageOsdsApi_getStorageOSDStatus = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storageOsdsApi.getStorageOSDStatus);
  }
}
storageMonsApi_getMonitorSummary = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storageMonsApi.getMonitorSummary);
  }
}
storageMonsApi_getMonitorDetails = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storageMonsApi.getMonitorDetails);
  }
}
storageOsdsApi_getStorageOSDsSummary = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storageOsdsApi.getStorageOSDsSummary);
  }
}
storageOsdsApi_getStorageOSDDetails = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storageOsdsApi.getStorageOSDDetails);
  }
}
storageOsdsApi_getOSDVersion = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storageOsdsApi.getOSDVersion);
  }
}
storageOsdsApi_getStorageOSDTree = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storageOsdsApi.getStorageOSDTree);
  }
}
storagePoolsApi_getStoragePGPoolsSummary = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storagePoolsApi.getStoragePGPoolsSummary);
  }
}
storagePoolsApi_getStoragePGPoolDetails = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storagePoolsApi.getStoragePGPoolDetails);
  }
}
storagePGsApi_getStoragePGSummary = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storagePGsApi.getStoragePGSummary);
  }
}
storagePGsApi_getStoragePGStuck = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storagePGsApi.getStoragePGStuck);
  }
}
storagePoolsApi_getStoragePoolFlowSeries = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storagePoolsApi.getStoragePoolFlowSeries);
  }
}
storageOsdsApi_getStorageOSDFlowSeries = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storageOsdsApi.getStorageOSDFlowSeries);
  }
}
storageOsdsApi_getStorageOSDAvgBW = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storageOsdsApi.getStorageOSDAvgBW);
  }
}
storageOsdsApi_getStorageOsdsUVEsList = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storageOsdsApi.getStorageOsdsUVEsList);
  }
}
storageMonsApi_getStorageDiskFlowSeries = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, storageMonsApi.getStorageDiskFlowSeries);
  }
}
